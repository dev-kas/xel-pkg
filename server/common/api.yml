openapi: 3.0.0
info:
  title: xel-pkg API
  version: 1.0.0
  description: Official package registry for the Xel programming language.

servers:
  - url: http://localhost:3000/api/v1
    description: Local development server

components:
  schemas:

    Package:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the package
        gid:
          type: integer
          description: Globally unique identifier for the package
        name:
          type: string
          description: Name of the package
        latest:
          type: integer
          description: ID of the latest version of the package
        description:
          type: string
          description: Description of the package
          maxLength: 255
        author:
          type: string
          description: Author of the package
        repo_name:
          type: string
          description: Name of the repository
        url:
          type: string
          description: URL of the repository
        mirror:
          type: string
          description: URL of the mirror
        tags:
          type: array
          items:
            type: string
          description: Tags for the package
        downloads:
          type: integer
          description: Number of downloads
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the package was last updated
        publishedAt:
          type: string
          format: date-time
          description: Timestamp when the package was published
        isDeprecated:
          type: boolean
          description: Whether the package is deprecated
        deprecatedReason:
          type: string
          description: Reason for deprecation

    Version:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the version
        gid:
          type: integer
          description: Globally unique identifier for the version
        version:
          type: string
          description: String representation of the version
        semver:
          type: object
          properties:
            major:
              type: integer
              description: Major version number
            minor:
              type: integer
              description: Minor version number
            patch:
              type: integer
              description: Patch version number
        package:
          type: integer
          description: ID of the package
        downloads:
          type: integer
          description: Number of downloads
        license:
          type: string
          description: License of the package
        dist_mode:
          type: string
          enum: [release, pre-release]
          description: Distribution mode of the package
        xel:
          type: string
          description: Xel version range
        engine:
          type: string
          description: Engine version range
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the version was last updated
        publishedAt:
          type: string
          format: date-time
          description: Timestamp when the version was published

    Tarball:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the tarball
        gid:
          type: integer
          description: Globally unique identifier for the tarball
        package:
          type: integer
          description: ID of the package
        version:
          type: integer
          description: ID of the version
        url:
          type: string
          format: uri
          description: URL to download the tarball
        size_bytes:
          type: integer
          description: Size of the tarball in bytes
          minimum: 1
        integrity:
          type: object
          description: Integrity information for the tarball
          properties:
            algorithm:
              type: string
              description: Hashing algorithm used (e.g., sha512)
              example: "sha512"
            hash:
              type: string
              description: Hash of the tarball contents
              example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        downloads:
          type: integer
          description: Number of downloads
          minimum: 0
          default: 0
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the tarball was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the tarball was last updated

    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: Error message

  responses:
    ValidationError:
      description: Validation error in request parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
                      description: Error message
                    param:
                      type: string
                      description: The parameter that failed validation
                    location:
                      type: string
                      description: Where the error occurred (body, query, params, etc.)

    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
                example: "Resource not found"

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
                example: "An unexpected error occurred"

    NoContent:
      description: Operation completed successfully with no content to return
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Success message
                example: "Operation completed successfully"

paths:

  # Packages Endpoints
  /packages:
    get:
      summary: Search for packages
      description: Returns a list of packages matching the search criteria.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of packages to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: Number of packages to skip
        - in: query
          name: query
          schema:
            type: string
          description: Search query string
        - in: query
          name: tags
          schema:
            type: string
          description: Comma-separated list of tags to filter by
        - in: query
          name: deprecated
          schema:
            type: boolean
          description: Include deprecated packages
      responses:
        '200':
          description: A list of packages
          content:
            application/json:
              schema:
                type: object
                properties:
                  packages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Package'
                  total:
                    type: integer
                    description: Total number of packages matching the query
                  limit:
                    type: integer
                    description: The requested limit
                  offset:
                    type: integer
                    description: The requested offset
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /packages/name/{name}:
    get:
      summary: Get a package by name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: Name of the package to retrieve
      responses:
        '200':
          description: A package object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '404':
          description: Package not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /packages/id/{id}:
    get:
      summary: Get a package by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the package to retrieve
      responses:
        '200':
          description: A package object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '404':
          description: Package not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Versions Endpoints
  /versions/{id}:
    get:
      summary: Get a version by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the version to retrieve
      responses:
        '200':
          description: A version object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '404':
          description: Version not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /versions/pkg/{id}:
    get:
      summary: Get all versions for a package
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the package to retrieve versions for
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of versions to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: Number of versions to skip
      responses:
        '200':
          description: A list of versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Version'
                  total:
                    type: integer
                    description: Total number of versions for the package
                  limit:
                    type: integer
                    description: The requested limit
                  offset:
                    type: integer
                    description: The requested offset
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Tarballs Endpoints
  /tarballs/{id}:
    get:
      summary: Get a tarball by ID
      description: Retrieve tarball metadata by its ID
      tags:
        - Tarballs
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the tarball to retrieve
      responses:
        '200':
          description: Tarball metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tarball'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
          
  /tarballs/{id}/download:
    get:
      summary: Download a tarball
      description: >
        Redirects to the download URL for the specified tarball.
        This endpoint also increments the download counter for the tarball.
      tags:
        - Tarballs
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the tarball to download
      responses:
        '302':
          description: Redirect to the tarball download URL
          headers:
            Location:
              schema:
                type: string
                format: uri
                example: https://example.com/package-1.0.0.tgz
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /tarballs/pkg/{id}:
    get:
      summary: Get all tarballs for a package
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the package to retrieve tarballs for
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of tarballs to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: Number of tarballs to skip
      responses:
        '200':
          description: A list of tarballs
          content:
            application/json:
              schema:
                type: object
                properties:
                  tarballs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tarball'
                  total:
                    type: integer
                    description: Total number of tarballs for the package
                  limit:
                    type: integer
                    description: The requested limit
                  offset:
                    type: integer
                    description: The requested offset
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tarballs/ver/{id}:
    get:
      summary: Get all tarballs for a version
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the version to retrieve tarballs for
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of tarballs to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: Number of tarballs to skip
      responses:
        '200':
          description: A list of tarballs
          content:
            application/json:
              schema:
                type: object
                properties:
                  tarballs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tarball'
                  total:
                    type: integer
                    description: Total number of tarballs for the version
                  limit:
                    type: integer
                    description: The requested limit
                  offset:
                    type: integer
                    description: The requested offset
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Indexing Endpoint
  /index/classic:
    post:
      summary: Submit a repository for indexing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: url
                  description: URL of the repository to index
                email:
                  type: string
                  format: email
                  description: Email address to notify when indexing is complete
              required:
                - url
                - email
      responses:
        '200':
          description: Repository added to queue
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        '422':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
openapi: 3.0.3
info:
  title: xel-pkg API
  version: 1.0.0
  description: Official package registry API for the Xel programming language.

servers:
  - url: http://localhost:3000/api/v1
    description: Development server

components:
  schemas:
    Package:
      type: object
      description: A Xel package.
      properties:
        id:
          type: integer
          description: Unique identifier for the package.
          readOnly: true
        gid:
          type: integer
          description: Globally unique identifier for the package.
          readOnly: true
        name:
          type: string
          description: Name of the package (lowercase).
          example: my_cool_package
        latest:
          type: integer
          description: ID of the latest version of the package.
          nullable: true
        description:
          type: string
          description: Description of the package.
          maxLength: 255
          example: This package does amazing things.
        author:
          type: string
          description: Author of the package.
          example: John Doe
        repo_name:
          type: string
          description: Name of the repository (auto-generated).
          example: pkg-123e4567e89b12d3a456426614174000
        url:
          type: string
          format: url
          description: URL of the original repository.
          example: https://github.com/johndoe/my-cool-package
        mirror:
          type: string
          format: url
          description: URL of the mirrored repository.
          example: https://github.com/xel-pkg/pkg-123e4567e89b12d3a456426614174000
        tags:
          type: array
          description: Tags associated with the package.
          items:
            type: string
            example: utility
        isDeprecated:
          type: boolean
          description: Indicates if the package is deprecated.
          default: false
        deprecatedReason:
          type: string
          description: Reason for deprecation.
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Timestamp of package creation.
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of last package update.
          readOnly: true
      required:
        - name
        - author
        - url
        - mirror

    Version:
      type: object
      description: A specific version of a Xel package.
      properties:
        id:
          type: integer
          description: Unique identifier for the version.
          readOnly: true
        gid:
          type: integer
          description: Globally unique identifier for the version.
          readOnly: true
        version:
          type: string
          description: String representation of the version.
          example: 1.0.0
        semver:
          type: object
          description: Semantic versioning information.
          properties:
            major:
              type: integer
              description: Major version number.
              example: 1
            minor:
              type: integer
              description: Minor version number.
              example: 0
            patch:
              type: integer
              description: Patch version number.
              example: 0
          required:
            - major
            - minor
            - patch
        package:
          type: integer
          description: ID of the package this version belongs to.
        license:
          type: string
          description: License of the package.
          example: MIT
        dist_mode:
          type: string
          description: Distribution mode (release or pre-release).
          enum:
            - release
            - pre-release
        xel:
          type: string
          description: Xel version range.
          example: '>=1.0.0 <2.0.0'
        engine:
          type: string
          description: Engine version range.
          example: '*'
        createdAt:
          type: string
          format: date-time
          description: Timestamp of version creation.
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of last version update.
          readOnly: true
      required:
        - version
        - semver
        - package
        - license
        - dist_mode
        - xel
        - engine

    Tarball:
      type: object
      description: A tarball file associated with a package version.
      properties:
        id:
          type: integer
          description: Unique identifier for the tarball.
          readOnly: true
        gid:
          type: integer
          description: Globally unique identifier for the tarball.
          readOnly: true
        package:
          type: integer
          description: ID of the package.
        version:
          type: integer
          description: ID of the version.
        url:
          type: string
          format: url
          description: URL of the tarball.
          example: https://example.com/package-1.0.0.tar.gz
        size_bytes:
          type: integer
          description: Size of the tarball in bytes.
          example: 1024000
        integrity:
          type: object
          description: Integrity information for verifying the tarball.
          properties:
            algorithm:
              type: string
              description: Hashing algorithm used.
              example: sha256
            hash:
              type: string
              description: Hash of the tarball.
              example: e5b7a9d2c8a3f7e1d4b2c5a9e8d7c9a8b7f1e4d2c8a3f7e1d4b2c5a9e8d7c9a8
          required:
            - algorithm
            - hash
        downloads:
          type: integer
          description: Number of times the tarball has been downloaded.
          default: 0
        createdAt:
          type: string
          format: date-time
          description: Timestamp of tarball creation.
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of last tarball update.
          readOnly: true
      required:
        - package
        - version
        - url
        - size_bytes
        - integrity

    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: Error message.

  parameters:
    packageLimit:
      name: limit
      in: query
      description: Maximum number of packages to return.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    packageOffset:
      name: offset
      in: query
      description: Starting position for package results (for pagination).
      schema:
        type: integer
        minimum: 0
        default: 0
    packageQuery:
      name: query
      in: query
      description: Search query string.
      schema:
        type: string
    packageTags:
      name: tags
      in: query
      description: Comma-separated list of tags to filter packages.
      schema:
        type: string
    packageDeprecated:
      name: deprecated
      in: query
      description: Include deprecated packages in the results.
      schema:
        type: boolean
    packageIdParam:
      name: id
      in: path
      description: The ID of the package.
      required: true
      schema:
        type: integer
    packageNameParam:
      name: name
      in: path
      description: The name of the package.
      required: true
      schema:
        type: string

    versionLimit:
      name: limit
      in: query
      description: Maximum number of versions to return.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    versionOffset:
      name: offset
      in: query
      description: Starting position for version results (for pagination).
      schema:
        type: integer
        minimum: 0
        default: 0
    versionIdParam:
      name: id
      in: path
      description: The ID of the version.
      required: true
      schema:
        type: integer

    tarballLimit:
      name: limit
      in: query
      description: Maximum number of tarballs to return.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    tarballOffset:
      name: offset
      in: query
      description: Starting position for tarball results (for pagination).
      schema:
        type: integer
        minimum: 0
        default: 0
    tarballIdParam:
      name: id
      in: path
      description: The ID of the tarball.
      required: true
      schema:
        type: integer

  responses:
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              errors:
                - message: Package not found

    ServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              errors:
                - message: Internal server error

    ValidationError:
      description: Validation error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              errors:
                - message: Invalid package ID

paths:
  /packages:
    get:
      summary: Search for packages.
      description: Retrieve a list of packages, with optional filtering and pagination.
      parameters:
        - $ref: '#/components/parameters/packageLimit'
        - $ref: '#/components/parameters/packageOffset'
        - $ref: '#/components/parameters/packageQuery'
        - $ref: '#/components/parameters/packageTags'
        - $ref: '#/components/parameters/packageDeprecated'
      responses:
        '200':
          description: A list of packages.
          content:
            application/json:
              schema:
                type: object
                properties:
                  packages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Package'
                  total:
                    type: integer
                    description: Total number of packages matching the query.
                  limit:
                    type: integer
                    description: The requested limit.
                  offset:
                    type: integer
                    description: The requested offset.
        '500':
          $ref: '#/components/responses/ServerError'

  /packages/id/{id}:
    get:
      summary: Get a package by ID.
      description: Retrieve a specific package by its unique ID.
      parameters:
        - $ref: '#/components/parameters/packageIdParam'
      responses:
        '200':
          description: The requested package.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /packages/name/{name}:
    get:
      summary: Get a package by name.
      description: Retrieve a specific package by its name.
      parameters:
        - $ref: '#/components/parameters/packageNameParam'
      responses:
        '200':
          description: The requested package.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /versions/pkg/{id}:
    get:
      summary: Get versions for a package.
      description: Retrieve a list of versions associated with a specific package ID.
      parameters:
        - $ref: '#/components/parameters/packageIdParam'
        - $ref: '#/components/parameters/versionLimit'
        - $ref: '#/components/parameters/versionOffset'
      responses:
        '200':
          description: A list of versions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Version'
                  total:
                    type: integer
                    description: Total number of versions for the package.
                  limit:
                    type: integer
                    description: The requested limit.
                  offset:
                    type: integer
                    description: The requested offset.
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /versions/{id}:
    get:
      summary: Get a version by ID.
      description: Retrieve a specific version by its unique ID.
      parameters:
        - $ref: '#/components/parameters/versionIdParam'
      responses:
        '200':
          description: The requested version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '404':
          description: Version not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /tarballs/pkg/{id}:
    get:
      summary: Get tarballs for a package.
      description: Retrieve a list of tarballs associated with a specific package ID.
      parameters:
        - $ref: '#/components/parameters/packageIdParam'
        - $ref: '#/components/parameters/tarballLimit'
        - $ref: '#/components/parameters/tarballOffset'
      responses:
        '200':
          description: A list of tarballs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tarballs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tarball'
                  total:
                    type: integer
                    description: Total number of tarballs for the package.
                  limit:
                    type: integer
                    description: The requested limit.
                  offset:
                    type: integer
                    description: The requested offset.
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /tarballs/ver/{id}:
    get:
      summary: Get tarballs for a version.
      description: Retrieve a list of tarballs associated with a specific version ID.
      parameters:
        - $ref: '#/components/parameters/versionIdParam'
        - $ref: '#/components/parameters/tarballLimit'
        - $ref: '#/components/parameters/tarballOffset'
      responses:
        '200':
          description: A list of tarballs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tarballs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tarball'
                  total:
                    type: integer
                    description: Total number of tarballs for the version.
                  limit:
                    type: integer
                    description: The requested limit.
                  offset:
                    type: integer
                    description: The requested offset.
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /tarballs/{id}:
    get:
      summary: Get a tarball by ID.
      description: Retrieve a specific tarball by its unique ID.
      parameters:
        - $ref: '#/components/parameters/tarballIdParam'
      responses:
        '200':
          description: The requested tarball.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tarball'
        '404':
          description: Tarball not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'
    
  /tarballs/{id}/download:
    get:
      summary: Download a tarball by ID.
      description: Redirects to the tarball's URL for download.
      parameters:
        - $ref: '#/components/parameters/tarballIdParam'
      responses:
        '302':
          description: Redirect to the tarball URL.
          headers:
            Location:
              schema:
                type: string
                format: url
                description: The URL of the tarball to download.
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /index/classic:
    post:
      summary: Add a package for indexing (classic submission).
      description: Submit a package repository for indexing using the classic method (URL and email).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: url
                  description: The URL of the package repository.
                  example: https://github.com/example/my-package
                email:
                  type: string
                  format: email
                  description: The email address to notify about the indexing status.
                  example: user@example.com
              required:
                - url
                - email
      responses:
        '200':
          description: Repository added to the indexing queue.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Repository added to queue
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'
  /brew:
    get:
      summary: Brew coffee (or not).
      description: Simulates brewing coffee. Returns 200 OK with a "Juice successfully brewed" message 20% of the time. Otherwise, returns 418 I'm a teapot with a relevant message.
      parameters:
        - name: luck
          in: query
          description: A number from 0-100 to represent how lucky you want to be. 0 is no luck, 100 is guaranteed juice.
          schema:
            type: integer
            minimum: 0
            maximum: 100
      responses:
        '200':
          description: Juice successfully brewed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Juice successfully brewed. Wait, what?
        '418':
          description: I'm a teapot.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: I'm a teapot. I cannot brew coffee, because I am, quite literally, a teapot.
